% Compute critical points of perturbed system 
CONFIG
   TrackType:0;
   UserHomotopy: 1;
   TrackTolBeforeEG: 1e-7;
   TrackTolDuringEG: 1e-7;
   FinalTol: 1e-10;
   SliceTolBeforeEG: 1e-7;
   SliceTolDuringEG: 1e-7;
   SliceFinalTol: 1e-10;
   SecurityMaxNorm: 1e8;
   MaxNorm: 1e8;
   ODEPredictor: 2;
END

INPUT

 % test point
 variable l0,l1,l2,l3,l4,l5,l6,l7;
 constant p0,p1,p2,p3,q0,q1,q2,q3,a0,a1,a2,a3,a4,a5,a6,a7;
 
 p0 = CHANGE_ME_1;
 p1 = CHANGE_ME_2;
 p2 = CHANGE_ME_3;
 p3 = CHANGE_ME_4;
 q0 = CHANGE_ME_5;
 q1 = CHANGE_ME_6;
 q2 = CHANGE_ME_7;
 q3 = CHANGE_ME_8;
 a0 = CHANGE_ME_A1;
 a1 = CHANGE_ME_A2;
 a2 = CHANGE_ME_A3;
 a3 = CHANGE_ME_A4;
 a4 = CHANGE_ME_A5;
 a5 = CHANGE_ME_A6;
 a6 = CHANGE_ME_A7;
 a7 = CHANGE_ME_A8;



   % Base & moving platforms are both triangles with joints
   % at vertices and one joint along each edge.
   % Specify this by giving random vertices and then
   % interpolating to put random point on each edge.
   % As the figures are planar, we set z-coordinates to zero.
   constant sqrt3;
   sqrt3 = 3^(1/2);
   % Vertices for the stationary rigid body
   constant a1x,a1y, a3x,a3y, a5x,a5y;
   a1x = -sqrt3; a1y = -1;
   a3x =  sqrt3; a3y = -1;
   a5x =    0;   a5y = 2;
   constant a1z,a2z,a3z,a4z,a5z,a6z;
   a1z=0;a2z=0;a3z=0;a4z=0;a5z=0;a6z=0;
   % Interpolating constants for sides
   constant a2,a4,a6;
   a2=0.5;a4=0.5;a6=0.5;
   a2x = a2*a1x + (1-a2)*a3x;
   a2y = a2*a1y + (1-a2)*a3y;
   a4x = a4*a3x + (1-a4)*a5x;
   a4y = a4*a3y + (1-a4)*a5y;
   a6x = a6*a5x + (1-a6)*a1x;
   a6y = a6*a5y + (1-a6)*a1y;
   % Do similar for the moving rigid body
   % Vertices for the stationary rigid body
   constant b2x,b2y, b4x,b4y, b6x,b6y;
   b2x = 0;   b2y=2;
   b4x = -sqrt3; b4y = -1;
   b6x =  sqrt3; b6y = -1;
   constant b1z,b2z,b3z,b4z,b5z,b6z;
   b1z=0;b2z=0;b3z=0;b4z=0;b5z=0;b6z=0;
   % Interpolating constants for sides
   constant b1,b3,b5;
   b1=0.5;b3=0.5;b5=0.5;
   b1x = b1*b6x + (1-b1)*b2x;
   b1y = b1*b6y + (1-b1)*b2y;
   b3x = b3*b2x + (1-b3)*b4x;
   b3y = b3*b2y + (1-b3)*b4y;
   b5x = b5*b4x + (1-b5)*b6x;
   b5y = b5*b4y + (1-b5)*b6y;
   % squared distances between point pairs
   constant d1;
   d1 = 9;
   d2=d1;d3=d1;d4=d1;d5=d1;d6=d1;

   % These will be the squared distance functions
   function f1,f2,f3,f4,f5;
   % The Study quadric
   function Study;

   % Use Study coordinates for the position & orientation of the moving body.
   variable_group e0,e1,e2,e3,g0,g1,g2,g3;
   % dehomogenize  
   function patch;
   patch = e0 + e1 + e2 + e3 - 1;

   % Let X be the 4x4 representation of quaternion (x0,x1,x2,x3)
   % So
   % X = [ x0 -x1 -x2 -x3
   %       x1  x0 -x3  x2
   %       x2  x3  x0 -x1
   %       x3 -x2  x1  x0 ]
   % Treat vector (v1,v2,v3) as quaternion (0,v1,v2,v3).
   % We also say that Re(x) = x0 or equivalently, Re(X) = x0*I.

   % Quaternions obey the relation X*X' = |(x0,x1,x2,x3)|^2 = |X|^2
   % Let ee = E*E', gg = G*G':
   ee = e0^2 + e1^2 + e2^2 +e3^2;
   gg = g0^2 + g1^2 + g2^2 +g3^2;

   % After transformation, a point b = (b1,b2,b3) becomes
   %   Transf(b) = (E*B*E' + G*E')/ee
   % with the Study quadric side condition of
   %   Study = Re(G*E') = 0
   Study = g0*e0 + g1*e1 + g2*e2 + g3*e3;

   % Accordingly, the governing equations are the squared distance relations
   % (*)  d = | (E*B*E' + G*E')/ee - A |^2
   %        = [ (E*B*E' + G*E')/ee - A ]*[ (E*B'*E' + E*G')/ee - A']
   % After expanding this, several instances of E*E' = ee*I appear.  After
   % simplifying ee/ee = 1 (cases of ee=0 are meaningless) and then
   % clearing the denominator by multiplying by ee, (*) becomes
   % a quadric relation in E,G, with A,B,d considered constants.
   % We apply this 6 times for d_i, a_i, b_i.

   % We simplify (*) with some vector algebra, where the following
   % terms appear:
   R11 = e0^2+e1^2-e2^2-e3^2;
   R12 = 2*(-e0*e3+e1*e2);
   R13 = 2*( e0*e2+e1*e3);
   R21 = 2*( e0*e3+e2*e1);
   R22 = e0^2-e1^2+e2^2-e3^2;
   R23 = 2*(-e0*e1+e2*e3);
   R31 = 2*(-e0*e2+e3*e1);
   R32 = 2*( e0*e1+e3*e2);
   R33 = e0^2-e1^2-e2^2+e3^2;
   u1 = g0*e1 - e0*g1;
   u2 = g0*e2 - e0*g2;
   u3 = g0*e3 - e0*g3;
   v1 = g2*e3 - g3*e2;
   v2 = g3*e1 - g1*e3;
   v3 = g1*e2 - g2*e1;

   % Now, we form the 6 distance equations.
   % Write it in terms of J, then substitute J = 1,...,6
%   fJ = (aJx^2+aJy^2+aJz^2+bJx^2+bJy^2+bJz^2-dJ)*ee + gg +
%        2*(u1*(aJx-bJx) + u2*(aJy-bJy) + u3*(aJz-bJz))  +
%        2*(v1*(aJx+bJx) + v2*(aJy+bJy) + v3*(aJz+bJz))  +
%        -2*( aJx*(R11*bJx+R12*bJy+R13*bJz) +
%            aJy*(R21*bJx+R22*bJy+R23*bJz) +
%            aJz*(R31*bJx+R32*bJy+R33*bJz) ) ;

   f1 = (a1x^2+a1y^2+a1z^2+b1x^2+b1y^2+b1z^2-d1)*ee + gg +
        2*(u1*(a1x-b1x) + u2*(a1y-b1y) + u3*(a1z-b1z))  +
        2*(v1*(a1x+b1x) + v2*(a1y+b1y) + v3*(a1z+b1z))  +
        -2*( a1x*(R11*b1x+R12*b1y+R13*b1z) +
            a1y*(R21*b1x+R22*b1y+R23*b1z) +
            a1z*(R31*b1x+R32*b1y+R33*b1z) );

   f2 = (a2x^2+a2y^2+a2z^2+b2x^2+b2y^2+b2z^2-d2)*ee + gg +
        2*(u1*(a2x-b2x) + u2*(a2y-b2y) + u3*(a2z-b2z))  +
        2*(v1*(a2x+b2x) + v2*(a2y+b2y) + v3*(a2z+b2z))  +
        -2*( a2x*(R11*b2x+R12*b2y+R13*b2z) +
            a2y*(R21*b2x+R22*b2y+R23*b2z) +
            a2z*(R31*b2x+R32*b2y+R33*b2z) );

   f3 = (a3x^2+a3y^2+a3z^2+b3x^2+b3y^2+b3z^2-d3)*ee + gg +
        2*(u1*(a3x-b3x) + u2*(a3y-b3y) + u3*(a3z-b3z))  +
        2*(v1*(a3x+b3x) + v2*(a3y+b3y) + v3*(a3z+b3z))  +
        -2*( a3x*(R11*b3x+R12*b3y+R13*b3z) +
            a3y*(R21*b3x+R22*b3y+R23*b3z) +
            a3z*(R31*b3x+R32*b3y+R33*b3z) );

   f4 = (a4x^2+a4y^2+a4z^2+b4x^2+b4y^2+b4z^2-d4)*ee + gg +
        2*(u1*(a4x-b4x) + u2*(a4y-b4y) + u3*(a4z-b4z))  +
        2*(v1*(a4x+b4x) + v2*(a4y+b4y) + v3*(a4z+b4z))  +
        -2*( a4x*(R11*b4x+R12*b4y+R13*b4z) +
            a4y*(R21*b4x+R22*b4y+R23*b4z) +
            a4z*(R31*b4x+R32*b4y+R33*b4z) );

   f5 = (a5x^2+a5y^2+a5z^2+b5x^2+b5y^2+b5z^2-d5)*ee + gg +
        2*(u1*(a5x-b5x) + u2*(a5y-b5y) + u3*(a5z-b5z))  +
        2*(v1*(a5x+b5x) + v2*(a5y+b5y) + v3*(a5z+b5z))  +
        -2*( a5x*(R11*b5x+R12*b5y+R13*b5z) +
            a5y*(R21*b5x+R22*b5y+R23*b5z) +
            a5z*(R31*b5x+R32*b5y+R33*b5z) );






 function c1,c3,c4,c5,c6,c7,c8,g;

 c1 = (e0-p0)*l0+(e1-p1)*l1+(e2-p2)*l2+(e3-p3)*l3+(g0-q0)*l4+(g1-q1)*l5+(g2-q2)*l6+(g3-q3)*l7;
 c3 = e0*l4+e1*l5+e2*l6+e3*l7+g0*l0+g1*l1+g2*l2+g3*l3;
 c4 = (2*e0*(a1x^2+a1y^2+a1z^2+b1x^2+b1y^2+b1z^2-d1)-2*(a1x-b1x)*g1-2*(a1y-b1y)*g2-2*(a1z-b1z)*g3-2*(2*b1x*e0-2*b1y*e3+2*b1z*e2)*a1x-2*(2*b1x*e3+2*b1y*e0-2*b1z*e1)*a1y-2*(-2*b1x*e2+2*b1y*e1+2*b1z*e0)*a1z)*l0+(2*e1*(a1x^2+a1y^2+a1z^2+b1x^2+b1y^2+b1z^2-d1)+2*(a1x-b1x)*g0+2*(a1y+b1y)*g3-2*(a1z+b1z)*g2-2*(2*b1x*e1+2*b1y*e2+2*b1z*e3)*a1x-2*(2*b1x*e2-2*b1y*e1-2*b1z*e0)*a1y-2*(2*b1x*e3+2*b1y*e0-2*b1z*e1)*a1z)*l1+(2*e2*(a1x^2+a1y^2+a1z^2+b1x^2+b1y^2+b1z^2-d1)+2*(a1y-b1y)*g0-2*(a1x+b1x)*g3+2*(a1z+b1z)*g1-2*(-2*b1x*e2+2*b1y*e1+2*b1z*e0)*a1x-2*(2*b1x*e1+2*b1y*e2+2*b1z*e3)*a1y-2*(-2*b1x*e0+2*b1y*e3-2*b1z*e2)*a1z)*l2+(2*e3*(a1x^2+a1y^2+a1z^2+b1x^2+b1y^2+b1z^2-d1)+2*(a1z-b1z)*g0+2*(a1x+b1x)*g2-2*(a1y+b1y)*g1-2*(-2*b1x*e3-2*b1y*e0+2*b1z*e1)*a1x-2*(2*b1x*e0-2*b1y*e3+2*b1z*e2)*a1y-2*(2*b1x*e1+2*b1y*e2+2*b1z*e3)*a1z)*l3+(2*g0+2*(a1x-b1x)*e1+2*(a1y-b1y)*e2+2*(a1z-b1z)*e3)*l4+(2*g1-2*(a1x-b1x)*e0-2*(a1y+b1y)*e3+2*(a1z+b1z)*e2)*l5+(2*g2-2*(a1y-b1y)*e0+2*(a1x+b1x)*e3-2*(a1z+b1z)*e1)*l6+(2*g3-2*(a1z-b1z)*e0-2*(a1x+b1x)*e2+2*(a1y+b1y)*e1)*l7;
 c5 = (2*e0*(a2x^2+a2y^2+a2z^2+b2x^2+b2y^2+b2z^2-d2)-2*(a2x-b2x)*g1-2*(a2y-b2y)*g2-2*(a2z-b2z)*g3-2*(2*b2x*e0-2*b2y*e3+2*b2z*e2)*a2x-2*(2*b2x*e3+2*b2y*e0-2*b2z*e1)*a2y-2*(-2*b2x*e2+2*b2y*e1+2*b2z*e0)*a2z)*l0+(2*e1*(a2x^2+a2y^2+a2z^2+b2x^2+b2y^2+b2z^2-d2)+2*(a2x-b2x)*g0+2*(a2y+b2y)*g3-2*(a2z+b2z)*g2-2*(2*b2x*e1+2*b2y*e2+2*b2z*e3)*a2x-2*(2*b2x*e2-2*b2y*e1-2*b2z*e0)*a2y-2*(2*b2x*e3+2*b2y*e0-2*b2z*e1)*a2z)*l1+(2*e2*(a2x^2+a2y^2+a2z^2+b2x^2+b2y^2+b2z^2-d2)+2*(a2y-b2y)*g0-2*(a2x+b2x)*g3+2*(a2z+b2z)*g1-2*(-2*b2x*e2+2*b2y*e1+2*b2z*e0)*a2x-2*(2*b2x*e1+2*b2y*e2+2*b2z*e3)*a2y-2*(-2*b2x*e0+2*b2y*e3-2*b2z*e2)*a2z)*l2+(2*e3*(a2x^2+a2y^2+a2z^2+b2x^2+b2y^2+b2z^2-d2)+2*(a2z-b2z)*g0+2*(a2x+b2x)*g2-2*(a2y+b2y)*g1-2*(-2*b2x*e3-2*b2y*e0+2*b2z*e1)*a2x-2*(2*b2x*e0-2*b2y*e3+2*b2z*e2)*a2y-2*(2*b2x*e1+2*b2y*e2+2*b2z*e3)*a2z)*l3+(2*g0+2*(a2x-b2x)*e1+2*(a2y-b2y)*e2+2*(a2z-b2z)*e3)*l4+(2*g1-2*(a2x-b2x)*e0-2*(a2y+b2y)*e3+2*(a2z+b2z)*e2)*l5+(2*g2-2*(a2y-b2y)*e0+2*(a2x+b2x)*e3-2*(a2z+b2z)*e1)*l6+(2*g3-2*(a2z-b2z)*e0-2*(a2x+b2x)*e2+2*(a2y+b2y)*e1)*l7;
 c6 = (2*e0*(a3x^2+a3y^2+a3z^2+b3x^2+b3y^2+b3z^2-d3)-2*(a3x-b3x)*g1-2*(a3y-b3y)*g2-2*(a3z-b3z)*g3-2*(2*b3x*e0-2*b3y*e3+2*b3z*e2)*a3x-2*(2*b3x*e3+2*b3y*e0-2*b3z*e1)*a3y-2*(-2*b3x*e2+2*b3y*e1+2*b3z*e0)*a3z)*l0+(2*e1*(a3x^2+a3y^2+a3z^2+b3x^2+b3y^2+b3z^2-d3)+2*(a3x-b3x)*g0+2*(a3y+b3y)*g3-2*(a3z+b3z)*g2-2*(2*b3x*e1+2*b3y*e2+2*b3z*e3)*a3x-2*(2*b3x*e2-2*b3y*e1-2*b3z*e0)*a3y-2*(2*b3x*e3+2*b3y*e0-2*b3z*e1)*a3z)*l1+(2*e2*(a3x^2+a3y^2+a3z^2+b3x^2+b3y^2+b3z^2-d3)+2*(a3y-b3y)*g0-2*(a3x+b3x)*g3+2*(a3z+b3z)*g1-2*(-2*b3x*e2+2*b3y*e1+2*b3z*e0)*a3x-2*(2*b3x*e1+2*b3y*e2+2*b3z*e3)*a3y-2*(-2*b3x*e0+2*b3y*e3-2*b3z*e2)*a3z)*l2+(2*e3*(a3x^2+a3y^2+a3z^2+b3x^2+b3y^2+b3z^2-d3)+2*(a3z-b3z)*g0+2*(a3x+b3x)*g2-2*(a3y+b3y)*g1-2*(-2*b3x*e3-2*b3y*e0+2*b3z*e1)*a3x-2*(2*b3x*e0-2*b3y*e3+2*b3z*e2)*a3y-2*(2*b3x*e1+2*b3y*e2+2*b3z*e3)*a3z)*l3+(2*g0+2*(a3x-b3x)*e1+2*(a3y-b3y)*e2+2*(a3z-b3z)*e3)*l4+(2*g1-2*(a3x-b3x)*e0-2*(a3y+b3y)*e3+2*(a3z+b3z)*e2)*l5+(2*g2-2*(a3y-b3y)*e0+2*(a3x+b3x)*e3-2*(a3z+b3z)*e1)*l6+(2*g3-2*(a3z-b3z)*e0-2*(a3x+b3x)*e2+2*(a3y+b3y)*e1)*l7;
 c7 = (2*e0*(a4x^2+a4y^2+a4z^2+b4x^2+b4y^2+b4z^2-d4)-2*(a4x-b4x)*g1-2*(a4y-b4y)*g2-2*(a4z-b4z)*g3-2*(2*b4x*e0-2*b4y*e3+2*b4z*e2)*a4x-2*(2*b4x*e3+2*b4y*e0-2*b4z*e1)*a4y-2*(-2*b4x*e2+2*b4y*e1+2*b4z*e0)*a4z)*l0+(2*e1*(a4x^2+a4y^2+a4z^2+b4x^2+b4y^2+b4z^2-d4)+2*(a4x-b4x)*g0+2*(a4y+b4y)*g3-2*(a4z+b4z)*g2-2*(2*b4x*e1+2*b4y*e2+2*b4z*e3)*a4x-2*(2*b4x*e2-2*b4y*e1-2*b4z*e0)*a4y-2*(2*b4x*e3+2*b4y*e0-2*b4z*e1)*a4z)*l1+(2*e2*(a4x^2+a4y^2+a4z^2+b4x^2+b4y^2+b4z^2-d4)+2*(a4y-b4y)*g0-2*(a4x+b4x)*g3+2*(a4z+b4z)*g1-2*(-2*b4x*e2+2*b4y*e1+2*b4z*e0)*a4x-2*(2*b4x*e1+2*b4y*e2+2*b4z*e3)*a4y-2*(-2*b4x*e0+2*b4y*e3-2*b4z*e2)*a4z)*l2+(2*e3*(a4x^2+a4y^2+a4z^2+b4x^2+b4y^2+b4z^2-d4)+2*(a4z-b4z)*g0+2*(a4x+b4x)*g2-2*(a4y+b4y)*g1-2*(-2*b4x*e3-2*b4y*e0+2*b4z*e1)*a4x-2*(2*b4x*e0-2*b4y*e3+2*b4z*e2)*a4y-2*(2*b4x*e1+2*b4y*e2+2*b4z*e3)*a4z)*l3+(2*g0+2*(a4x-b4x)*e1+2*(a4y-b4y)*e2+2*(a4z-b4z)*e3)*l4+(2*g1-2*(a4x-b4x)*e0-2*(a4y+b4y)*e3+2*(a4z+b4z)*e2)*l5+(2*g2-2*(a4y-b4y)*e0+2*(a4x+b4x)*e3-2*(a4z+b4z)*e1)*l6+(2*g3-2*(a4z-b4z)*e0-2*(a4x+b4x)*e2+2*(a4y+b4y)*e1)*l7;
 c8 = (2*e0*(a5x^2+a5y^2+a5z^2+b5x^2+b5y^2+b5z^2-d5)-2*(a5x-b5x)*g1-2*(a5y-b5y)*g2-2*(a5z-b5z)*g3-2*(2*b5x*e0-2*b5y*e3+2*b5z*e2)*a5x-2*(2*b5x*e3+2*b5y*e0-2*b5z*e1)*a5y-2*(-2*b5x*e2+2*b5y*e1+2*b5z*e0)*a5z)*l0+(2*e1*(a5x^2+a5y^2+a5z^2+b5x^2+b5y^2+b5z^2-d5)+2*(a5x-b5x)*g0+2*(a5y+b5y)*g3-2*(a5z+b5z)*g2-2*(2*b5x*e1+2*b5y*e2+2*b5z*e3)*a5x-2*(2*b5x*e2-2*b5y*e1-2*b5z*e0)*a5y-2*(2*b5x*e3+2*b5y*e0-2*b5z*e1)*a5z)*l1+(2*e2*(a5x^2+a5y^2+a5z^2+b5x^2+b5y^2+b5z^2-d5)+2*(a5y-b5y)*g0-2*(a5x+b5x)*g3+2*(a5z+b5z)*g1-2*(-2*b5x*e2+2*b5y*e1+2*b5z*e0)*a5x-2*(2*b5x*e1+2*b5y*e2+2*b5z*e3)*a5y-2*(-2*b5x*e0+2*b5y*e3-2*b5z*e2)*a5z)*l2+(2*e3*(a5x^2+a5y^2+a5z^2+b5x^2+b5y^2+b5z^2-d5)+2*(a5z-b5z)*g0+2*(a5x+b5x)*g2-2*(a5y+b5y)*g1-2*(-2*b5x*e3-2*b5y*e0+2*b5z*e1)*a5x-2*(2*b5x*e0-2*b5y*e3+2*b5z*e2)*a5y-2*(2*b5x*e1+2*b5y*e2+2*b5z*e3)*a5z)*l3+(2*g0+2*(a5x-b5x)*e1+2*(a5y-b5y)*e2+2*(a5z-b5z)*e3)*l4+(2*g1-2*(a5x-b5x)*e0-2*(a5y+b5y)*e3+2*(a5z+b5z)*e2)*l5+(2*g2-2*(a5y-b5y)*e0+2*(a5x+b5x)*e3-2*(a5z+b5z)*e1)*l6+(2*g3-2*(a5z-b5z)*e0-2*(a5x+b5x)*e2+2*(a5y+b5y)*e1)*l7;
 g = l0 + a1*l1 + a2*l2 + a3*l3 + a4*l4 + a5*l5 + a6*l6 + a7*l7 - a0
END;

% this function is a linear comibination of the others and thus is ignored
   f6 = (a6x^2+a6y^2+a6z^2+b6x^2+b6y^2+b6z^2-d6)*ee + gg +
        2*(u1*(a6x-b6x) + u2*(a6y-b6y) + u3*(a6z-b6z))  +
        2*(v1*(a6x+b6x) + v2*(a6y+b6y) + v3*(a6z+b6z))  +
        -2*( a6x*(R11*b6x+R12*b6y+R13*b6z) +
            a6y*(R21*b6x+R22*b6y+R23*b6z) +
            a6z*(R31*b6x+R32*b6y+R33*b6z) ) ;


